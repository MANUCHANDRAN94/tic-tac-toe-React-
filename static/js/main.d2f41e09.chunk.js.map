{"version":3,"sources":["components/Buttons.jsx","components/Box.jsx","components/Player.jsx","components/Title.jsx","App.js","utilities/winCalculation.js","utilities/resultCalc.js","serviceWorker.js","index.js"],"names":["Buttons","props","type","disabled","ifWin","value","className","name","idx","onClick","onClickE","Box","buttons","map","key","buttonClick","wins","Player","winnerPlayer","style","color","fontSize","draws","turn","Title","App","state","winner","result","playerSelect","Array","fill","bind","resetGame","e","parseInt","target","changedButtons","this","draw","indexOf","lines","i","length","a","b","c","calculateWinner","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d2f41e09.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Buttons(props) {\r\n  return (\r\n    <input\r\n      type=\"button\"\r\n      disabled={props.ifWin !== null ? true : ( props.value === \" \" ? false : true )}\r\n      className=\"tttButton\"\r\n      value={props.value}\r\n      name={props.idx}\r\n      onClick={props.onClickE}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nfunction Box(props) {\r\n  return (\r\n    <div className=\"tttBox\">\r\n      {props.buttons.map((value, idx) => {\r\n        return (\r\n          <Buttons\r\n            key={idx}\r\n            value={value}\r\n            idx={idx}\r\n            onClickE={props.buttonClick}\r\n            ifWin = {props.wins}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Box;\r\n","import React from \"react\";\r\n\r\nfunction Player(props) {\r\n  if (props.winnerPlayer === \"X\" || props.winnerPlayer === \"O\") {\r\n    return (\r\n      <div className=\"playerBox\" style={{ color: \"green\" , fontSize:\"2em\" }}>\r\n        <h4>\r\n          {props.winnerPlayer} <span> wins!!!! üëèüëèüëè</span>\r\n        </h4>\r\n      </div>\r\n    );\r\n  } else if (props.draws) {\r\n    return (\r\n      <div className=\"playerBox\">\r\n        <h4>\r\n          Its a Draw... Try again! <span>ü§†</span>\r\n        </h4>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"playerBox\">\r\n        <h3>\r\n          It's\r\n          {props.turn ? \" X's \" : \" O's \"}\r\n          turn...üëç\r\n        </h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","import React from 'react'\r\n\r\nfunction Title() {\r\n    return (\r\n        <div className=\"titleDiv\">\r\n            <h1>\r\n                Tic <span className=\"first\">Tac</span> <span className=\"first\">Toe</span>\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Box from \"./components/Box\";\nimport Player from \"./components/Player\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport Title from \"./components/Title\";\nimport { resultCalc } from \"./utilities/resultCalc\";\nimport { calculateWinner } from './utilities/winCalculation';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      winner: null,\n      draws: null,\n      result: null,\n      playerSelect: true,\n      buttons: [...Array(9)].fill(' '),\n      // result:null\n    }\n    this.buttonClick = this.buttonClick.bind(this)\n    this.resetGame = this.resetGame.bind(this)\n    // this.resetResult = this.resetResult.bind(this)\n  }\n\n  buttonClick(e) {\n    const idx = parseInt(e.target.name);\n    let changedButtons = this.state.buttons;\n    changedButtons[idx] = this.state.playerSelect ? 'X' : 'O';\n    let draw = changedButtons.indexOf(' ') === -1 ? 1 : null;\n    const winner = calculateWinner(this.state.buttons);\n    this.setState({\n      buttons: changedButtons,\n      playerSelect: !this.state.playerSelect,\n      winner: winner,\n      draws: draw\n\n    })\n\n  }\n\n  resetGame() {\n    let value = resultCalc(this.state.draws, this.state.winner)\n    this.setState({\n      winner: null,\n      draws: null,\n      playerSelect: true,\n      buttons: [...Array(9)].fill(' '),\n      result: value\n    })\n  }\n\n  // resetResult(){\n  //   this.setState({\n  //     result: null\n  //   })\n  // }\n\n  render() {\n    return (\n      <div>\n        <Title />\n        {/* <ScoreBoard score={this.state.result} reset={this.resetResult}/> */}\n        <Box buttons={this.state.buttons}\n          buttonClick={this.buttonClick}\n          wins={this.state.winner}\n        />\n        <Player winnerPlayer={this.state.winner}\n          turn={this.state.playerSelect}\n          draws={this.state.draws}\n        />\n        {(this.state.winner === 'X' || this.state.winner === 'O' || this.state.draws) &&\n          <button className=\"resetBtn\" onClick={this.resetGame}>Reset</button>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export function calculateWinner(buttons) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (buttons[a] && buttons[a] === buttons[b] && buttons[a] === buttons[c]) {\r\n        return buttons[a] !== ' '? buttons[a] : null;\r\n      }\r\n    }\r\n    return null;\r\n  }","export function resultCalc(draw, winner) {\r\n    if (draw || winner) {\r\n\r\n        if (draw === 1) {\r\n            return 'D'\r\n        } else if (winner === 'X') {\r\n            return 'X'\r\n        } else if (winner === 'O') {\r\n            return 'O'\r\n        }\r\n    } else {\r\n        return null;\r\n    }\r\n\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}